#+TITLE: Applying error function to observational data
#+DATE: <2020-11-10 Tue>

* Introduction

We need to fit a model to observational data. We use a density function to determinate if the fitted model is good. Since the observational data don't completely cover the observational space, We need that every bin in the density function must have the same weight.

* Hands on

** Loading data

We load the observational data.

#+NAME: DataLoad
#+BEGIN_SRC python :noweb yes :results output
import os
from code.read_obs_tables import get_Marino_data_werr, get_Marino_data
DataPath = os.getenv('DATAFILES')
Mar_err = get_Marino_data_werr(DataPath + 'obs/catalog_M13+err.csv')
Mar = get_Marino_data(DataPath + 'obs/NEWcomp_HIIregions_v1.txt')
print('Data Loaded')
#+END_SRC

#+RESULTS: DataLoad
: Data Loaded



** Data Visualization
We plot the data in a diagnostic diagram

#+BEGIN_SRC python :noweb yes :results file

import numpy as np
import matplotlib.pyplot as plt
from code.diagnostic_diagrams_plots import DiagnosticDiagramScatterPlot
<<DataLoad>>
fig, ax = plt.subplots()
DiagnosticDiagramScatterPlot(np.log10(Mar_err['N2/Ha']),
                             np.log10(Mar_err['O3/Hb']), type_plot='O3N2',
                             ax=ax, color='b', alpha=0.75,
                             xmin=-2.7
                             )
fig.tight_layout()
fig.savefig('images/ObsDiagPlot.png')
return 'images/ObsDiagPlot.png'
#+END_SRC

#+RESULTS:
[[file:images/ObsDiagPlot.png]]

[[file:images/ObsDiagPlot.png]]

* Applying the function error
** Getting the density function
To get the density function of the data, we calculate a 2D Histogram and then it is normalize by the max value.

#+NAME: GetDensMap
#+BEGIN_SRC python :noweb yes
import numpy as np
from code.GetDensityFunc import kdeHist
<<DataLoad>>
xp = np.log10(Mar_err['N2/Ha'])
yp = np.log10(Mar_err['O3/Hb'])
HistMap = kdeHist(xp, yp, xlim=[-2.7, 0.5], ylim=[-2.5, 1.2])
xx = HistMap[0]
yy = HistMap[1]
zz = HistMap[2]
zz /= zz.max()
#+END_SRC

#+RESULTS: GetDensMap
: None


** Convolution with a Gaussian Func
The original data could be peaky, in order to get a smooth distribution, we convolve the original data with a Gaussian function.

#+NAME: GetConvDensMap
#+BEGIN_SRC python :noweb yes
from astropy.convolution import Gaussian2DKernel, convolve
<<GetDensMap>>
kernel = Gaussian2DKernel(x_stddev=0.65)
zzConv = convolve(zz, kernel)
#+END_SRC

#+RESULTS: GetConvDensMap
: None

*** Ploting the results
We can see in the figure the result of the convolution with a Gaussian function
#+BEGIN_SRC python :noweb yes :results file
import matplotlib.pyplot as plt
from code.misc import color_map_califa_old, Kf_curve_plot, Kw_curve_plot, Gr_curve_plot, Es_curve_plot
from code.misc import color_map_califa_old
<<GetConvDensMap>>
cmap = color_map_califa_old()
fig, axes = plt.subplots(1, 2, figsize=(7.5,3.5))
axes[0].imshow(zz.transpose(), origin='lower', cmap=cmap,
               extent=[-2.7, 0.5, -2.5, 1.2], aspect='auto',
               vmin=0, vmax=1)
plot = axes[1].imshow(zzConv.transpose(), origin='lower', cmap=cmap,
               extent=[-2.7, 0.5, -2.5, 1.2], aspect='auto',
               vmin=0, vmax=1)
axes[0].set_title('Original Data')
axes[1].set_title('Conv Data')
Kf_curve_plot(ax=axes[0], x_min=-2.7, color='k')
Kw_curve_plot(ax=axes[0], x_min=-2.7, color='k')
Gr_curve_plot(ax=axes[0], x_min=-2.7, color='k')
Es_curve_plot(ax=axes[0], x_min=-2.7, color='k')
axes[0].set_ylim(-2.5, 1.2)
Kf_curve_plot(ax=axes[1], x_min=-2.7, color='k')
Kw_curve_plot(ax=axes[1], x_min=-2.7, color='k')
Gr_curve_plot(ax=axes[1], x_min=-2.7, color='k')
Es_curve_plot(ax=axes[1], x_min=-2.7, color='k')
axes[1].set_ylim(-2.5, 1.2)
fig.colorbar(plot)
fig.tight_layout()
fig.savefig('images/DensFunc.png')
return 'images/DensFunc.png'
#+END_SRC

#+RESULTS:
[[file:images/DensFunc.png]]

[[file:images/DensFunc.png]]

** Applying a err function
Since each bin in the above density map will be a weight to the model fit, it is convenient that each bin have a value ~1. For this, we apply a error function.

#+BEGIN_SRC python :noweb yes :results file
from scipy.special import erf
import matplotlib.pyplot as plt
from code.misc import color_map_califa_old, Kf_curve_plot, Kw_curve_plot, Gr_curve_plot, Es_curve_plot
<<GetConvDensMap>>
cmap = color_map_califa_old()
erfzzConv = erf((zzConv-0.02)/0.1)
fig, ax = plt.subplots()
plot = ax.imshow(erfzzConv.transpose(), origin='lower', cmap=cmap,
                 extent=[-2.7, 0.5, -2.5, 1.2], aspect='auto',
                 vmin=0, vmax=1)
Kf_curve_plot(ax=ax, x_min=-2.7, color='k')
Kw_curve_plot(ax=ax, x_min=-2.7, color='k')
Gr_curve_plot(ax=ax, x_min=-2.7, color='k')
Es_curve_plot(ax=ax, x_min=-2.7, color='k')
ax.set_ylim(-2.5, 1.2)
fig.colorbar(plot)
fig.tight_layout()
fig.savefig('images/erfDensFunc.png')
return 'images/erfDensFunc.png'
#+END_SRC

#+RESULTS:
[[file:images/erfDensFunc.png]]

[[file:images/erfDensFunc.png]]
